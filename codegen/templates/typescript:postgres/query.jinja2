/* This file was automatically generated by pgc */
{%- for import in imports %}
{{import}};
{%- endfor %}
import postgres from "postgres";
import type * as models from "{{request.config.codegen.options.import_path | default(request.config.codegen.out)}}/models/models.ts";
{%- for subnamespace in query_namespace.subnamespaces %}
import * as {{subnamespace}}  from "./{{subnamespace}}.ts"
{%- endfor %}

{%- for method in query_namespace.methods %}

export const {{ method.query.name | to_screaming_snake_case }} = `
{{ method.query.query }}
`
{%- endfor %}
{{"\n"}}
{%- for method in query_namespace.methods %}
{%- if method.output_model != None %}

export interface {{method.output_model.type.declaration | to_pascal_case }} {
    {%- for field, type in method.output_model.fields | items %}
    {{field | to_camel_case }}: {{type.annotation}};
    {%- endfor %}
}

{% endif %}
{%- for _, input_model in method.input_models | items %}
export interface {{ input_model.type.declaration | to_pascal_case }} {
    {%- for field, type in input_model.fields | items %}
    {{field | to_camel_case }}: {{type.annotation}}
    {%- endfor %}
}
{% endfor %}
{%- endfor %}


export class {{ query_namespace.name | to_pascal_case }}Queries {
    {%- for subnamespace in  query_namespace.subnamespaces %}
    {{subnamespace}}: {{subnamespace}}.{{subnamespace | to_pascal_case }}Queries;
    {%- endfor %}

    constructor(readonly sql: postgres.Sql,) {
        {%- for subnamespace in  query_namespace.subnamespaces %}
        this.{{subnamespace}} = new {{subnamespace}}.{{subnamespace | to_pascal_case }}Queries(sql);
        {%- endfor %}
    }
    {% for method in query_namespace.methods %}
    {%- if method.query.annotations.not_null_result -%}
    {%- set HANDLE_NONE = 'assert row is not None, "a query marked with @not_null_result has returned null."' %}
    {%- set OR_NONE = '' %}
    {% else %}
    {%- set HANDLE_NONE = 'if (rows.length === 0) return null;' %}
    {%- set OR_NONE = ' | null' %}
    {%- endif %}

    {%- if method.query.command == 'one' %}

    {%- if method.query.output | length == 1 %}
    async {{ method.query.name}}(
        {%- for argument, type in method.arguments | items -%}
            {{argument}}: {{type.annotation}}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
        ): Promise<{{method.output_type.annotation}}{{OR_NONE}}> {
        const rows = await this.sql.unsafe(
            {{method.query.name | to_screaming_snake_case }}, [
            {%- for parameter in method.query.parameters -%}
                {{parameter.name}}{% if not loop.last %}, {% endif %}
            {%- endfor %}], { prepare: true }
        );
        {{HANDLE_NONE}}
        return Object.values(rows[0])[0];
    }
    {%- else %}
    async {{method.query.name}}(
        {%- for argument, type in method.arguments | items -%}
            {{argument}}: {{type.annotation}}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
        ): Promise<{{method.output_type.annotation}}{{OR_NONE}}> {
        const rows = await this.sql.unsafe(
            {{method.query.name | to_screaming_snake_case }}, [
            {%- for parameter in method.query.parameters -%}
                {{parameter.name}}{% if not loop.last %}, {% endif %}
            {%- endfor %}], { prepare: true }
        );
        {{HANDLE_NONE}}
        return rows[0] as {{method.output_type.annotation}};
    }
    {%- endif %}
    {%- elif method.query.command == 'many' %}
    {%- if method.query.output | length == 1 %}
    async {{method.query.name}}(
        {%- for argument, type in method.arguments | items -%}
            {{argument}}: {{type.annotation}}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
        ): Promise<Array<{{method.output_type.annotation}}>> {
        const rows = await this.sql.unsafe(
            {{method.query.name | to_screaming_snake_case }}, [
            {%- for parameter in method.query.parameters -%}
                {{parameter.name}}{% if not loop.last %}, {% endif %}
            {%- endfor %}], { prepare: true }
        )
        return rows.map(row => Object.values(row[0])[0] as {{method.output_type.annotation}});
    }
    {%- else%}
    async {{method.query.name}}(
        {%- for argument, type in method.arguments | items -%}
            {{argument}}: {{type.annotation}}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
        ): Promise<Array<{{method.output_type.annotation}}>> {
        const rows = await this.sql.unsafe(
            {{method.query.name | to_screaming_snake_case }}, [
            {%- for parameter in method.query.parameters -%}
                {{parameter.name}}{% if not loop.last %}, {% endif %}
            {%- endfor %}], { prepare: true }
        );
        return rows as Array<{{method.output_type.annotation}}>;
    }
    {%- endif %}
    {%- elif method.query.command == 'val' %}
    async {{method.query.name}}(
        {%- for argument, type in method.arguments | items -%}
            {{argument}}: {{type.annotation}}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
        ): Promise<{{method.output_type.annotation}}{{OR_NONE}}> {
        const rows = await this.sql.unsafe(
            {{method.query.name | to_screaming_snake_case }}, [
            {%- for parameter in method.query.parameters -%}
                {{parameter.name}}{% if not loop.last %}, {% endif %}
            {%- endfor %}], { prepare: true }
        )
        {{HANDLE_NONE}}
        return Object.values(rows[0])[0];
    }
    {%- else %}
    async {{method.query.name}}(
        {%- for argument, type in method.arguments | items -%}
            {{argument}}: {{type.annotation}}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
        ) {
        return await this.sql.unsafe(
            {{method.query.name | to_screaming_snake_case }}, [
            {%- for parameter in method.query.parameters -%}
                {{parameter.name}}{% if not loop.last %}, {% endif %}
            {%- endfor %}], { prepare: true }
        );
    }
    {%- endif %}
    {%- endfor %}
}
