// This file was automatically generated by pgc
// run `pgc build` to regenerate it
import postgres from "postgres"
{%- for type in used_types %}
{% for import in (type | imports) %}
{%- if import != ""%}
{{import}}
{%- endif %}
{%- endfor %}
{%- endfor %}
import { parser, ArrayParser, BigIntParser } from "./parsers.ts";
import * as models from "./models/models.ts";
{%- for subnamespace in query_namespace.subnamespaces %}
import * as {{subnamespace}} from "./{{subnamespace}}.ts"
{%- endfor %}

{%- for method in query_namespace.methods %}

const {{ method.query.name | to_screaming_snake_case }} = `
{{ method.query.query  }}
`;
{%- endfor %}
{{"\n"}}
{%- for method in query_namespace.methods %}
{%- if method.output_model != None %}
export interface {{method.output_model.type | name | to_pascal_case }} {
    {%- for field, type in method.output_model.fields | items %}
    {{field}}: {{ type | annotation }}; // {{ type }}
    {%- endfor %}
}
{% endif %}
{%- for _, input_model in method.input_models | items %}
export interface {{ input_model.type | name }} {
    {%- for field, type in input_model.fields | items %}
    {{field}}: {{type | annotation}};
    {%- endfor %}
}
{% endfor %}
{%- endfor %}


export class {{ query_namespace.name | to_pascal_case }}Queries {
    constructor(readonly connection: postgres.Sql) {
        this.connection = connection
        {%- for subnamespace in  query_namespace.subnamespaces %}
        this.{{subnamespace}} = new {{subnamespace}}.{{subnamespace | to_pascal_case }}Queries(connection)
        {%- endfor %}
    }

    {%- for method in query_namespace.methods%}
    {%- if method.query.annotations.not_null_result -%}
    {% set HANDLE_NONE -%}
        if (!rows[0]) {
            throw new Error("The query {{method.query.name}} is marked with @not_null_result, but it has returned null.");
        }
    {% endset %}
    {%- set OR_NONE = '' %}
    {% else %}
    {%- set HANDLE_NONE = 'if (!rows[0]) return null' %}
    {%- set OR_NONE = ' | null' %}
    {%- endif %}
    {%- if method.query.command == 'one' %}
    {%- if method.query.output | length == 1 %}
    async {{method.query.name}}(
        {%- for argument, type in method.arguments | items -%}
            {{argument}}: {{type | annotation}} {%- if not loop.last %}, {% endif %}
        {%- endfor -%}
        ) {
        const rows = await this.connection.unsafe(
            {{method.query.name | to_screaming_snake_case }}, [
            {%- for parameter in method.query.parameters -%}
                {{parameter.name}},
            {%- endfor -%}
            ], { prepare: true }
        )
        {{HANDLE_NONE}}
        {%- if method.output_type | requires_parsing %}
        return {{method.output_type | type_parser }}.parse(rows[0]["{{method.query.output[0].name}}"]) as {{method.output_type | annotation}}{{OR_NONE}};
        {%- else %}
        return rows[0]["{{method.query.output[0].name}}"] as {{method.output_type | annotation}}{{OR_NONE}};
        {%- endif %}
    }
    {%- else %}
    async {{method.query.name}}(
        {%- for argument, type in method.arguments | items -%}
            {{argument}}: {{type | annotation}}{%- if not loop.last %}, {% endif %}
        {%- endfor -%}
        ) {
        const rows = await this.connection.unsafe(
            {{method.query.name | to_screaming_snake_case }}, [
            {%- for parameter in method.query.parameters -%}
                {{parameter.name}} {%- if not loop.last %}, {% endif %}
            {%- endfor -%}
            ], { prepare: true }
        )
        {{HANDLE_NONE}}


        return {
        {%- for column_name, column_type in method.output_columns | items %}
            {%- if column_type | requires_parsing %}
            ["{{column_name | to_camel_case }}"]: {{ column_type | type_parser }}.parse(rows[0]["{{column_name}}"]),
            {%- else %}
            ["{{column_name | to_camel_case }}"]: rows[0]["{{column_name}}"],
            {%- endif %}
        {%- endfor %}
        } as {{method.output_type | annotation}}{{OR_NONE}};

    }
    {%- endif %}
    {%- elif method.query.command == 'many' %}
    {%- if method.query.output | length == 1 %}
    async {{method.query.name}}(
        {%- for argument, type in method.arguments | items -%}
            {{argument}}: {{type | annotation}} {% if not loop.last %}, {% endif %}
        {%- endfor -%}
        ) {
        const rows = await this.connection.unsafe(
            {{method.query.name | to_screaming_snake_case }}, [
            {%- for parameter in method.query.parameters -%}
                {{parameter.name}}{%- if not loop.last %}, {% endif %}
            {%- endfor -%}
            ], { prepare: true }
        )
        return rows.map(row => {
            {%- for column_name, column_type in method.output_columns | items %}
            {%- if column_type | requires_parsing %}
            return {{ column_type | type_parser }}.parse(row["{{ column_name }}"]) as {{ method.output_type | annotation}};
            {%- else %}
            return row["{{method.query.output[0].name}}"] as {{method.output_type | annotation}};
            {%- endif %}
            {%- endfor %}
        })
    }
    {%- else%}
    async {{method.query.name}}(
        {%- for argument, type in method.arguments | items -%}
            {{argument}}: {{type | annotation}} {% if not loop.last %}, {% endif %}
        {%- endfor -%}
        ) {
        const rows = await this.connection.unsafe(
            {{method.query.name | to_screaming_snake_case }}, [
            {%- for parameter in method.query.parameters -%}
                {{parameter.name}} {%- if not loop.last %}, {% endif %}
            {%- endfor -%}
            ], { prepare: true }
        )
        return rows.map((row) => ({
        {%- for column_name, column_type in method.output_columns | items %}
            {%- if column_type | requires_parsing %}
            ["{{column_name | to_camel_case }}"]: {{ column_type | type_parser}}.parse(row["{{column_name}}"]),
            {%- else %}
            ["{{column_name | to_camel_case }}"]: row["{{column_name}}"],
            {%- endif %}

        {%- endfor %}
        }));
    }
    {%- endif %}
    {%- elif method.query.command == 'exec' %}
    async {{method.query.name}}(
        {%- for argument, type in method.arguments | items -%}
            {{argument}}: {{type | annotation}}{%- if not loop.last %}, {% endif %}
        {%- endfor -%}
        ): {{method.output_type | annotation}}{{OR_NONE}} {
        const rows = await this.connection.unsafe(
            {{method.query.name | to_screaming_snake_case }}, [
            {%- for parameter in method.query.parameters -%}
                {{parameter.name}}, {%- if not loop.last %}, {% endif %}
            {%- endfor -%}
            ], { prepare: true }
        )
    }
    {%- endif %}
    {%- endfor %}
}
