# This file was automatically generated by pgc
# flake8: noqa
# pylint: disable=unused-import
import asyncpg
import json
import typing
import dataclasses
from queries import models
from . import author



@dataclasses.dataclass
class Queries:
    def __init__(self, connection: asyncpg.Connection):
        self.connection = connection
        self.author = author.AuthorQueries(connection)

    
async def init_connection(conn: asyncpg.Connection):
    await conn.set_type_codec(
        'jsonb',
        encoder=json.dumps,
        decoder=json.loads,
        schema='pg_catalog'
    )

    await conn.set_type_codec(
        'json',
        encoder=json.dumps,
        decoder=json.loads,
        schema='pg_catalog'
    )

    await conn.set_type_codec(
        "details",
        encoder=lambda model: (model.id, model.has_party_room, model.has_attic, model.has_gym, model.has_tap_water, model.has_electric_gate_opener, model.has_telephone_line, model.has_guest_parking, model.has_dining_room, model.has_paddle_court, model.has_swimming_pool, model.has_alarm, model.has_bedroom_suite, model.has_cable_tv, model.has_jacuzzi, model.has_laundry, model.has_boiler, model.has_basketball_court, model.has_kitchen, model.has_security, model.has_study, model.has_tennis_court, model.has_dressing_room, model.has_sauna, model.has_terrace, model.has_grill, model.has_balcony, model.has_controlled_access, model.has_fridge, model.has_patio, model.has_playground, model.has_living_room, model.has_half_bathroom, model.has_garden, model.has_internet_access, model.has_heating, model.has_indoor_fireplace, model.has_electric_generator, model.has_maid_room, model.has_lift, model.has_cistern, model.has_playroom, model.has_air_conditioning, model.has_natural_gas, model.has_cinema_hall, model.has_closet, model.has_elevator),
        decoder=lambda row: models.post.Details(*row),
        schema="post",
        format="tuple",
    )

    await conn.set_type_codec(
        "draft",
        encoder=lambda model: (model.id, model.data, model.user_id),
        decoder=lambda row: models.post.Draft(*row),
        schema="post",
        format="tuple",
    )

    await conn.set_type_codec(
        "draft_image",
        encoder=lambda model: (model.id, model.storage_id, model.ordering, model.draft_id),
        decoder=lambda row: models.post.DraftImage(*row),
        schema="post",
        format="tuple",
    )

    await conn.set_type_codec(
        "status",
        encoder=lambda model: (model.id),
        decoder=lambda row: models.post.Status(*row),
        schema="post",
        format="tuple",
    )

    await conn.set_type_codec(
        "view",
        encoder=lambda model: (model.id, model.created_at, model.user_id, model.post_id),
        decoder=lambda row: models.post.View(*row),
        schema="post",
        format="tuple",
    )
    

    await conn.set_type_codec(
        "_sqlx_migrations",
        encoder=lambda model: (model.version, model.success, model.installed_on, model.execution_time, model.checksum, model.description),
        decoder=lambda row: models.public.SqlxMigrations(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "author",
        encoder=lambda model: (model.id, model.name, model.birthday),
        decoder=lambda row: models.public.Author(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "book",
        encoder=lambda model: (model.id, model.title, model.isbn, model.is_best_seller, model.year, model.author_id, model.genre),
        decoder=lambda row: models.public.Book(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "commune",
        encoder=lambda model: (model.id, model.province, model.region, model.name, model.geometry),
        decoder=lambda row: models.public.Commune(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "complex",
        encoder=lambda model: (model.imag, model.real),
        decoder=lambda row: models.public.Complex(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "currency",
        encoder=lambda model: (model.id),
        decoder=lambda row: models.public.Currency(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "currency_price",
        encoder=lambda model: (model.id, model.price),
        decoder=lambda row: models.public.CurrencyPrice(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "currency_price_history",
        encoder=lambda model: (model.valid_until, model.id, model.valid_since, model.price),
        decoder=lambda row: models.public.CurrencyPriceHistory(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "foo",
        encoder=lambda model: (model.a, model.c, model.b),
        decoder=lambda row: models.public.Foo(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "genre",
        encoder=lambda model: (model.id),
        decoder=lambda row: models.public.Genre(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "geography_columns",
        encoder=lambda model: (model.srid, model.f_table_name, model.type, model.f_geography_column, model.f_table_catalog, model.f_table_schema, model.coord_dimension),
        decoder=lambda row: models.public.GeographyColumns(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "geometry_columns",
        encoder=lambda model: (model.f_table_schema, model.coord_dimension, model.srid, model.f_table_catalog, model.f_geometry_column, model.type, model.f_table_name),
        decoder=lambda row: models.public.GeometryColumns(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "geometry_dump",
        encoder=lambda model: (model.geom, model.path),
        decoder=lambda row: models.public.GeometryDump(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "listing_type",
        encoder=lambda model: (model.id),
        decoder=lambda row: models.public.ListingType(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "orientation",
        encoder=lambda model: (model.id),
        decoder=lambda row: models.public.Orientation(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "place",
        encoder=lambda model: (model.id, model.street, model.coordinates, model.number),
        decoder=lambda row: models.public.Place(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "post",
        encoder=lambda model: (model.id, model.title, model.address, model.condominium, model.currency, model.orientation, model.description, model.realtor_id, model.coordinates, model.price, model.property_type, model.warehouses, model.highlighted, model.year, model.service_bedroom, model.land_area, model.listing_type, model.bathrooms, model.floor, model.bedrooms, model.service_bathroom, model.parking_lots, model.author_id, model.built_area, model.numeric_id, model.status),
        decoder=lambda row: models.public.Post(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "post_image",
        encoder=lambda model: (model.id, model.storage_id, model.ordering, model.post_id),
        decoder=lambda row: models.public.PostImage(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "property_type",
        encoder=lambda model: (model.id),
        decoder=lambda row: models.public.PropertyType(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "realtor",
        encoder=lambda model: (model.id, model.first_name, model.user_id, model.last_name, model.phone),
        decoder=lambda row: models.public.Realtor(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "realtor_history",
        encoder=lambda model: (model.phone, model.valid_since, model.first_name, model.user_id, model.id, model.valid_until, model.last_name),
        decoder=lambda row: models.public.RealtorHistory(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "spatial_ref_sys",
        encoder=lambda model: (model.srid, model.auth_srid, model.srtext, model.proj4text, model.auth_name),
        decoder=lambda row: models.public.SpatialRefSys(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "storage",
        encoder=lambda model: (model.id, model.bucket, model.sha1, model.extension),
        decoder=lambda row: models.public.Storage(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "suggestion",
        encoder=lambda model: (model.number, model.coordinates, model.id, model.address, model.street),
        decoder=lambda row: models.public.Suggestion(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "user",
        encoder=lambda model: (model.id, model.role, model.email),
        decoder=lambda row: models.public.User(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "user_history",
        encoder=lambda model: (model.id, model.email, model.valid_since, model.role, model.valid_until),
        decoder=lambda row: models.public.UserHistory(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "user_role",
        encoder=lambda model: (model.id),
        decoder=lambda row: models.public.UserRole(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "valid_detail",
        encoder=lambda model: (model.valid, model.location, model.reason),
        decoder=lambda row: models.public.ValidDetail(*row),
        schema="public",
        format="tuple",
    )

    await conn.set_type_codec(
        "visit_request",
        encoder=lambda model: (model.id, model.rut, model.post_id, model.uid, model.availability, model.comment, model.email, model.created_at, model.full_name, model.phone),
        decoder=lambda row: models.public.VisitRequest(*row),
        schema="public",
        format="tuple",
    )
    

    await conn.set_type_codec(
        "last_sync",
        encoder=lambda model: (model.id, model.datetime),
        decoder=lambda row: models.salesforce.LastSync(*row),
        schema="salesforce",
        format="tuple",
    )

    await conn.set_type_codec(
        "post_adapter",
        encoder=lambda model: (model.post_id, model.salesforce_id, model.sha1),
        decoder=lambda row: models.salesforce.PostAdapter(*row),
        schema="salesforce",
        format="tuple",
    )

    await conn.set_type_codec(
        "storage_adapter",
        encoder=lambda model: (model.storage_id, model.url),
        decoder=lambda row: models.salesforce.StorageAdapter(*row),
        schema="salesforce",
        format="tuple",
    )
    
